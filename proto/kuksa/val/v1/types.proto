// Copyright Robert Bosch GmbH, 2022. Part of the Eclipse Kuksa Project.
//
// All rights reserved. This configuration file is provided to you under the
// terms and conditions of the Eclipse Distribution License v1.0 which
// accompanies this distribution, and is available at
// http://www.eclipse.org/org/documents/edl-v10.php

syntax = "proto3";

// I added V1 as in databroker. Is this good practice?
package kuksa.val.v1;
import "google/protobuf/timestamp.proto";


// A Value. 
message Value {
  google.protobuf.Timestamp timestamp = 1;

  oneof value {
    string string            = 11;
    bool bool                = 12;
    sint32 int32             = 13;
    sint64 int64             = 14;
    uint32 uint32            = 15;
    uint64 uint64            = 16;
    float float              = 17;
    double double            = 18;
    StringArray string_array = 21;
    BoolArray bool_array     = 22;
    Int32Array int32_array   = 23;
    Int64Array int64_array   = 24;
    Uint32Array uint32_array = 25;
    Uint64Array uint64_array = 26;
    FloatArray float_array   = 27;
    DoubleArray double_array = 28;
  }
}

// Describes a VSS datapoint, includes everything there is
// to know about it. Most fields optional
message Datapoint {
  // Defines the full VSS path of the datapoint.
  string path = 1;

  // The value of the datapoint
  Value value = 2;

  // The VSS data type of the entry.
  //
  // NOTE: protobuf doesn't have int8, int16, uint8 or uint16 so the actual
  // value will be serialized as int32 and uint32 respectively
  // (in the `value` field).
  //
  oneof optional_data_type {
    DataType data_type = 3;
  }

  // Describes the meaning and content of the datapoint.
  oneof optional_description {
    string description = 4;
  }

  // [optional]
  // A comment can be used to provide additional informal information
  // on a datapoint.
  oneof optional_comment {
    string comment = 10;
  }

  // [optional]
  // Whether this datapoint is deprecated.
  oneof optional_deprecation {
    string deprecation = 11;
  }

  // [optional]
  // The unit of measurement
  oneof optional_unit {
    string unit = 12;
  }

  // [optional]
  // Restrict which values are allowed.
  // Only restrictions matching the DataType {datatype} above is valid/used.

  ValueRestriction value_restriction = 13;

  // Data entry type
  // Adds specific fields
  oneof entry_type {
    Actuator actuator   = 30;
    Sensor sensor       = 31;
    Attribute attribute = 32;
  }

}

///////////////////////
// Actuator specific fields
message Actuator {
  // Target value of the actuator
  // NOTE: This is what you set in order to command the the actuator
  //       to move.
  Value target = 30;
}

////////////////////////
// Sensor specific
message Sensor {
//nothing for now
}

////////////////////////
// Attribute specific
message Attribute {
  // nothing for now.
}



// Value restriction
//
// One ValueRestriction{type} for each type, since
// they don't make sense unless the types match
//
message ValueRestriction {
  oneof restriction_type {
    ValueRestrictionsString string_restriction = 1;
    ValueRestrictionInt int_restriciton        = 2; //for all signed VSS integers
    ValueRestrictionUint uint_restiction       = 3; //for all unsigned VSS integers
    ValueRestrictionFloat float_restriction    = 4; //for VSS float and double
  }
}


message ValueRestrictionInt {
  oneof optional_min {
    sint64 min = 1;
  }
  oneof optional_max {
    sint64 max = 2;
  }
  repeated sint64 allowed_values = 3;
}

message ValueRestrictionUint {
  oneof optional_min {
    uint64 min = 1;
  }
  oneof optional_max {
    uint64 max = 2;
  }
  repeated uint64 allowed_values = 3;
}

message ValueRestrictionFloat {
  oneof optional_min {
    double min = 1;
  }
  oneof optional_max {
    double max = 2;
  }
  repeated double allowed_values = 3; //allowed for doubles/floats not recommended
}

message ValueRestrictionDouble {
  oneof optional_min {
    double min = 1;
  }
  oneof optional_max {
    double max = 2;
  }
  repeated double allowed_values = 3;
}


// min, max doesn't make much sense for a string
message ValueRestrictionsString {
  repeated string allowed_values = 3;
}


// VSS Data type of a signal
//
// Protobuf doesn't support int8, int16, uint8 or uint16.
// These are mapped to int32 and uint32 respectively.
//
enum DataType {
  STRING          = 0;
  BOOLEAN         = 1;
  INT8            = 2;
  INT16           = 3;
  INT32           = 4;
  INT64           = 5;
  UINT8           = 6;
  UINT16          = 7;
  UINT32          = 8;
  UINT64          = 9;
  FLOAT           = 10;
  DOUBLE          = 11;
  TIMESTAMP       = 12;
  STRING_ARRAY    = 20;
  BOOLEAN_ARRAY   = 21;
  INT8_ARRAY      = 22;
  INT16_ARRAY     = 23;
  INT32_ARRAY     = 24;
  INT64_ARRAY     = 25;
  UINT8_ARRAY     = 26;
  UINT16_ARRAY    = 27;
  UINT32_ARRAY    = 28;
  UINT64_ARRAY    = 29;
  FLOAT_ARRAY     = 30;
  DOUBLE_ARRAY    = 31;
}


enum View {
  VIEW_CURRENT_VALUE = 0;  // this is default, every implementation shall support this
  VIEW_TARGET_VALUE  = 1;  // this is a set point of an actuator
  VIEW_DATATYPE      = 2;  // VSS datatype of an element as string ("branch" in case of a VSS branch)
  VIEW_UNIT          = 3;   // VSS unit of an element as string
  VIEW_CHILDREN      = 4;   // Names of all direct children as string
  VIEW_ALL_METADATA  = 100; // All available metadata defined in VSS model
  VIEW_ALL           = 200; // All available data
}

enum Field {
    VALUE = 0;  // this is default, every implementation shall support this
    ACTUATOR_TARGET = 1;  // this is a set point of an actuator
    DATA_TYPE      = 2;  // VSS datatype of an element as string ("branch" in case of a   VSS branch)
    UNIT          = 3;   // VSS unit of an element as string
    DESCRIPTION = 4;
    COMMENT = 5;
    DEPRECATION = 6;
    VALUE_RESTRICTION = 7;
    ACTUATOR = 8;
    SENSOR = 9;
    ATTRIBUTE = 10;  
}

// General status. Status response shall be an HTTP-like code
// shall follow https://www.w3.org/TR/viss2-transport/#status-codes where it makes sense
message Error {
  uint32 code        = 1;
  string reason      = 2;
  string description = 3;
}

// used in get/set requests to optionally report status on indivusal paths
message DatapointError {
  string path = 1; //vss path
  Error  error = 2;
}

message StringArray {
  repeated string values = 1;
}

message BoolArray {
  repeated bool values = 1;
}

message Int32Array {
  repeated sint32 values = 1;
}

message Int64Array {
  repeated sint64 values = 1;
}

message Uint32Array {
  repeated uint32 values = 1;
}

message Uint64Array {
  repeated uint64 values = 1;
}

message FloatArray {
  repeated float values = 1;
}

message DoubleArray {
  repeated double values = 1;
}
