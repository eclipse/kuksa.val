// Copyright Robert Bosch GmbH, 2022. Part of the Eclipse Kuksa Project.
//
// All rights reserved. This configuration file is provided to you under the
// terms and conditions of the Eclipse Distribution License v1.0 which
// accompanies this distribution, and is available at
// http://www.eclipse.org/org/documents/edl-v10.php

// This is a base proto file for databroker and kuksa-val-basic
// function set

syntax = "proto3";

package kuksa.val.v1;

import "kuksa/val/v1/types.proto";

option go_package = "/kuksa_grpc_proto";

/*
Note on autorization: We assume to send auth-token or auth-uuid in metadata
Token is a JWT compliant token as the examples found here:
https://github.com/eclipse/kuksa.val/tree/master/kuksa_certificates/jwt
See also https://github.com/eclipse/kuksa.val/blob/master/doc/jwt.md
Upon reception of auth-token, server shall generate an auth_uuid in metadata
that the client can use instead of auth_token in subsequent calls.
*/

// The connecting service definition.
service VAL {
  //  Get data points..
  rpc Get(GetRequest) returns (GetResponse);

  // Set datapoints
  rpc Set(SetRequest) returns (SetResponse);
  
  // Subscribe to a set of data points
   //
   // Returns a stream of replies.
   //
   // InvalidArgument is returned if the request is malformed.
  //
  // Returns a stream of replies.
  //
  // InvalidArgument is returned if the request is malformed.
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);

  // Shall return a string identifier that allows the client to determine with what
  // server/server implementation/version it is talking
  // eg. kuksa-databroker 0.5.1
  rpc GetServerInfo(GetServerInfoRequest) returns (GetServerInfoResponse);
}

// Describing which data we want
message DataGetRequest {
  string path = 1;
  View view   = 2 ;
} 

// Request a number of VSS paths. 
message GetRequest {
  repeated DataGetRequest get = 1;
}


// Status is overall status, there may be  
// individual status information, 
message GetResponse {
  repeated Datapoint datapoints    = 1;
  repeated DatapointError errors   = 2;
  Error error                      = 3;
}

// Describing which data we want
message DataSetRequest {
  string path = 1;
  repeated Field fields =2 ;
  Datapoint datapoint = 3;
} 

// A list of datapoints to be set
message SetRequest {
  repeated DataSetRequest set = 1;
}

// Usually it is fine to only return global status for set requests.
// It is possible to return status messages for indiviudal VSS
// paths. It is not expected that you get a ResponseValue for 
// all set points, or that they contain any value
message SetResponse {
  Error error = 1;
  repeated DatapointError datapoint_errors = 2;
}


// A subscribe request either subscribes a simple VSS Path
// or can be given in form of an SQL query
// Simple queries for CURRENT_VALUE and TARGET_VALUE
// shall be supported as minimum by all implementations
message SubscribeRequest {
  repeated DataGetRequest simplesub = 1;
}

// In case of simple queries, a list of length 1 will be returned when
// a subscribed datapoint is updated. In case of complex queries 
// SELECT a,b ... more than one datapoint might be in the notification
message SubscribeResponse {
  repeated Datapoint datapoints = 1;
}

message GetServerInfoRequest {

}

message GetServerInfoResponse {
  string name = 1;
  string version = 2;
}